vex - variable expansion tool

USAGE  
       vex [options] template [variables.json | env:]...

DESCRIPTION

       "vex" replaces variable references in the "template file" with values defined in the
       "variable files" or the "environment". Variables are looked up from left to right as given
       in the command line.

OPTIONS

       --inner-begin STRING
              The second escape string in a substitution. The default is "{".

       --inner-end STRING
              The second escape string that ends a substitution. The default is "}".

       --color=YES/NO
              Force or disable ANSI coloring regardless of whether output is to a terminal or not.
              By default coloring is enabled only when output is to a terminal.

       --debug, -d
              Enable detailed logging. Very verbose.

       --outer-end STRING
              First escape string that defines the and of a substitution. The default is "}".

       --outer-begin STRING
              First escape string that defines a substitution. The default is "{".

       --help, -h
              Print this screen and exit

       --version
              Display version and build information and exit

SYNTAX

       "vex" scans for macro references in one of the forms below. The first form is 

       begin1 begin2 "name" [ / transform ]* [ + "name" [/ transform]* ]* - default-value end1 end2
       
       The first "name" is looked up and its immediately following transforms are applied. If the first "name" is
       not found, subsequent "names" are looked up until a value is found. If no lookup is successful, 
       the default value is used. If no default value is given, the macro is left unexpanded in the output.

       The second form renders a template in a loop:

       begin1 "label" [ : [-|+] [ "name" [+ "name" ]* ] [-integer] [+integer] ] begin2 "template" end1 "label" end2

       The loop counter is the first non zero size of the name in the list or the default value. The largest or
       the smalled value will be used if "+" or "-" are prepended, respectively. The last value prepended with "+"
       is used as the initial index, one based.

       A third form can be used to render a template conditionally:

       begin1 "label" ? "name" [|"name"]* [&"name"]* begin2 "template" end1 "label" end2
 
       In this case the variables are evaluated as a boolean expression: empty string, no value, 0, or "false" for false,
       anything else for true.

       The following text conversions are available:

       "base64", "base64d"
            Encode/decode BASE64
       "lower", "upper"
            Convert text to lowercase aor uppercase respectively
       "option", "cname"
            Change all non alphanumeric characters to "-"
       "id", "identifier"
            Change all non alphanumeric characters to "_"
       "bool"
            In this case the text are evaluated as a boolean expression: "yes", "true", "on" or a non-zero numeric
            value for true, anything else for false
       "html"
            "HTML" escape
       "C", "c", "string"
            Convert the text to a properly formatted C string
       "sh", "shell"
            Convert the text to a properly formatted shell string
       "json"
            Convert the text to a "Json" compatible string
       "shcom"
            Convert to "shell" style comment
       "ccom"
            Convert to "//" style "C" comment
       "ltrim", "rtrim", "trim"
            Strip all whitespace form the left side, the right side, or both sides of the string, respectively
       "lchop", "rchop", "chop"
            Remove one character form the left side, the right side, or both sides of the string, respectively
       "camelize", "decamelize"
            Convert from "_" style identifiers to camel case style and back
       "underscore"
            Convert "-" and "." to underscore "_"
