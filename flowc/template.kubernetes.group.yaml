---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{NAME}}-{{G_NODE_GROUP}}
  labels:
    app: {{NAME}}-{{G_NODE_GROUP}}
    flow-group: {{NAME}}
spec:
  replicas: ${replicas_{{NAME_UPPERID}}_{{G_NODE_GROUP_UPPER}}}
  selector:
    matchLabels:
      app: {{NAME}}-{{G_NODE_GROUP}}
  template:
    metadata:
      labels:
        app: {{NAME}}-{{G_NODE_GROUP}}
        flow-group: {{NAME}}
    spec:
{X:HAVE_IMAGE_PULL_SECRETS{
      imagePullSecrets:{{HAVE_IMAGE_PULL_SECRETS}}}X}
{S:IMAGE_PULL_SECRET{
      - name: "{{IMAGE_PULL_SECRET}}"
}S}
{X:HAVE_INIT_CONTAINERS{
      initContainers:{{HAVE_INIT_CONTAINERS}}}X}
{I:G_INIT_CONTAINER{
      - {{G_INIT_CONTAINER}}
}I}
{W:VOLUME_NAME{
${{{VOLUME_UPPERID}}_ART}      - command: ["/bin/sh", "-c", "/usr/local/bin/artiget.sh '${{{VOLUME_UPPERID}}}' --api-key-file /etc/artifactory/api-key -u -o /to-1"]
${{{VOLUME_UPPERID}}_COS}      - command: ["/bin/sh", "-c", "/usr/local/bin/rr-get.sh '${{{VOLUME_UPPERID}}}' -d /etc/cos-access -u -o /to-1"]
${{{VOLUME_UPPERID}}_PVC}      - command: ["/bin/sh", "-c", "rsync -vrtlog /from-1/. /to-1"] 
        image:  "{{PUSH_REPO-}}{{IMAGE}}" 
        securityContext: {privileged: true, runAsUser: 0} 
        name: volumes-init-{{VOLUME_OPTION}}
        volumeMounts:
${{{VOLUME_UPPERID}}_PVC}        - name: {{VOLUME_OPTION}}
${{{VOLUME_UPPERID}}_PVC}          mountPath: "/from-1"
${{{VOLUME_UPPERID}}_PVC}          readOnly: true
${{{VOLUME_UPPERID}}_COS}        - name: cos-access-{{VOLUME_OPTION}}
${{{VOLUME_UPPERID}}_COS}          mountPath: "/etc/cos-access"
${{{VOLUME_UPPERID}}_COS}          readOnly: true
${{{VOLUME_UPPERID}}_ART}        - name: api-key-{{VOLUME_OPTION}}
${{{VOLUME_UPPERID}}_ART}          mountPath: "/etc/artifactory"
${{{VOLUME_UPPERID}}_ART}          readOnly: true

        - name: scratch-{{VOLUME_OPTION}}
          mountPath: "/to-1"
          readOnly: false
}W}
      containers:
{N:G_NODE_NAME{
{{G_EXTERN_NODE}}      - name: {{G_NODE_OPTION}}
{{G_EXTERN_NODE}}        image: "{{G_NODE_IMAGE}}"
{{G_EXTERN_NODE}}        {{G_NODE_ENVIRONMENT}}
{{G_EXTERN_NODE}}        {{G_NODE_MOUNTS}}
{{G_EXTERN_NODE}}{{G_NODE_HAVE_MIN_MAX}}        resources:
{{G_EXTERN_NODE}}{{G_NODE_HAVE_MIN}}          requests:
{{G_EXTERN_NODE}}{{G_NODE_HAVE_MIN_MEMORY}}            memory: "{{G_NODE_MIN_MEMORY}}"
{{G_EXTERN_NODE}}{{G_NODE_HAVE_MIN_CPUS}}            cpu: "{{G_NODE_MIN_CPUS}}"
{{G_EXTERN_NODE}}{{G_NODE_HAVE_MIN_GPUS}}            nvidia.com/gpu: "{{G_NODE_MIN_GPUS}}"
{{G_EXTERN_NODE}}{{G_NODE_HAVE_MAX}}          limis:
{{G_EXTERN_NODE}}{{G_NODE_HAVE_MAX_MEMORY}}            memory: "{{G_NODE_MAX_MEMORY}}"
{{G_EXTERN_NODE}}{{G_NODE_HAVE_MAX_CPUS}}            cpu: "{{G_NODE_MAX_CPUS}}"
{{G_EXTERN_NODE}}{{G_NODE_HAVE_MAX_GPUS}}            nvidia.com/gpu: "{{G_NODE_MAX_GPUS}}"
}N}
{V:HAVE_VOLUMES{
      volumes:{{HAVE_VOLUMES}}
}V}
{W:VOLUME_NAME{
${{{VOLUME_UPPERID}}_PVC}        - name: {{VOLUME_OPTION}}
${{{VOLUME_UPPERID}}_PVC}          persistentVolumeClaim:
${{{VOLUME_UPPERID}}_PVC}            claimName: ${{{VOLUME_UPPERID}}}
${{{VOLUME_UPPERID}}_COS}        - name: cos-access-{{VOLUME_OPTION}}
${{{VOLUME_UPPERID}}_COS}          secret:
${{{VOLUME_UPPERID}}_COS}            secretName: ${{{VOLUME_UPPERID}}_SECRET_NAME}
${{{VOLUME_UPPERID}}_ART}        - name: api-key-{{VOLUME_OPTION}}
${{{VOLUME_UPPERID}}_ART}          secret:
${{{VOLUME_UPPERID}}_ART}            secretName: ${{{VOLUME_UPPERID}}_SECRET_NAME}
        - name: scratch-{{VOLUME_OPTION}}
          emptyDir: {}
}W}
---
apiVersion: v1
kind: Service
metadata:
  name: {{NAME}}-{{G_NODE_GROUP}}
  labels:
    app: {{NAME}}-{{G_NODE_GROUP}}
    flow-group: {{NAME}}
spec:
  ports:
{N:G_NODE_NAME{
{{G_EXTERN_NODE}}  - port: {{G_IMAGE_PORT}}
{{G_EXTERN_NODE}}    protocol: TCP
{{G_EXTERN_NODE}}    name: {{G_NODE_OPTION}}-port
}N}
  selector:
    app: {{NAME}}-{{G_NODE_GROUP}}
